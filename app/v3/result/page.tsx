/**
 * V3Ë®∫Êñ≠ÁµêÊûú„Éö„Éº„Ç∏ - ÈÄî‰∏≠Ë®∫Êñ≠„ÉªÊúÄÁµÇË®∫Êñ≠ÂØæÂøú
 */

"use client"

import { useState, useEffect, Suspense } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import {
  Brain,
  Target,
  TrendingUp,
  Clock,
  CheckCircle,
  ArrowRight,
  RefreshCw,
  FileText,
  Lightbulb,
  AlertTriangle,
  Star,
  ExternalLink,
  MessageSquareText,
  ChevronDown,
  ChevronUp
} from "lucide-react"

import { 
  getV3Session, 
  addV3ClickedService,
  setV3FinalResult,
  syncV3SessionToServer 
} from "@/lib/v3/session"
import { trackEvent } from "@/lib/analytics"
import { v3ServiceEngine, v3ServiceTracker } from "@/lib/v3/serviceRecommendation"

// „Çµ„Éº„Éì„Çπ„Ç´„Éº„Éâ„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàV3„Ç≥„É≥„Éë„ÇØ„ÉàÁâàÔºâ
function ServiceCard({ recommendation, onServiceClick, isUrgent = false }: {
  recommendation: any
  onServiceClick: (service: any, recommendation: any) => void
  isUrgent?: boolean
}) {
  const [imageLoadState, setImageLoadState] = useState(false)
  const [isExpanded, setIsExpanded] = useState(false)
  const rank = recommendation.rank || 1

  // V2„Çπ„Çø„Ç§„É´„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞Ë£ÖÈ£æ„ÇíÂèñÂæó
  const getRankStyle = (rank: number) => {
    switch (rank) {
      case 1:
        return {
          cardClass: "relative hover:shadow-2xl transition-all duration-300 border-2 border-yellow-400 rounded-xl bg-gradient-to-br from-yellow-50 to-orange-50 shadow-lg transform hover:-translate-y-2",
          rankBadge: "w-12 sm:w-14 h-12 sm:h-14 bg-gradient-to-br from-yellow-400 via-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-white font-bold text-sm sm:text-base shadow-lg border-3 border-white",
          icon: "üèÜ",
          text: "1‰Ωç",
          titleClass: "text-3xl sm:text-4xl font-black text-black hover:text-gray-900 drop-shadow-xl",
          titleShadow: '1px 1px 0px #fbbf24, -1px -1px 0px #fbbf24, 1px -1px 0px #fbbf24, -1px 1px 0px #fbbf24, 2px 2px 0px #f59e0b, 0px 0px 8px #fbbf24',
          buttonClass: "bg-gradient-to-r from-yellow-400 via-yellow-500 to-orange-500 hover:from-yellow-500 hover:via-yellow-600 hover:to-orange-600 text-black font-black text-lg py-6 px-6 shadow-xl hover:shadow-2xl animate-pulse hover:animate-none"
        }
      case 2:
        return {
          cardClass: "relative hover:shadow-xl transition-all duration-300 border-2 border-gray-400 rounded-xl bg-gradient-to-br from-gray-50 to-blue-50 shadow-md transform hover:-translate-y-1",
          rankBadge: "w-10 sm:w-12 h-10 sm:h-12 bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm shadow-lg border-3 border-white",
          icon: "ü•à",
          text: "2‰Ωç",
          titleClass: "text-2xl sm:text-3xl font-bold text-black hover:text-gray-900 drop-shadow-lg",
          titleShadow: '1px 1px 0px #e5e7eb, -1px -1px 0px #e5e7eb, 1px -1px 0px #e5e7eb, -1px 1px 0px #e5e7eb, 2px 2px 0px #6b7280, 0px 0px 8px #9ca3af',
          buttonClass: "bg-gradient-to-r from-gray-400 via-gray-500 to-gray-600 hover:from-gray-500 hover:via-gray-600 hover:to-gray-700 text-white font-bold py-5 px-4 shadow-lg hover:shadow-xl animate-pulse hover:animate-none"
        }
      case 3:
        return {
          cardClass: "relative hover:shadow-xl transition-all duration-300 border-2 border-orange-400 rounded-xl bg-gradient-to-br from-orange-50 to-yellow-50 shadow-md transform hover:-translate-y-1",
          rankBadge: "w-10 sm:w-12 h-10 sm:h-12 bg-gradient-to-br from-orange-400 via-orange-500 to-yellow-600 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm shadow-lg border-3 border-white",
          icon: "ü•â",
          text: "3‰Ωç",
          titleClass: "text-xl sm:text-2xl font-bold text-black hover:text-gray-900 drop-shadow-md",
          titleShadow: '1px 1px 0px #fed7aa, -1px -1px 0px #fed7aa, 1px -1px 0px #fed7aa, -1px 1px 0px #fed7aa, 2px 2px 0px #ea580c, 0px 0px 8px #f97316',
          buttonClass: "bg-gradient-to-r from-orange-400 via-orange-500 to-orange-600 hover:from-orange-500 hover:via-orange-600 hover:to-orange-700 text-white font-bold py-5 px-4 shadow-lg hover:shadow-xl animate-pulse hover:animate-none"
        }
      default:
        return {
          cardClass: "relative hover:shadow-lg transition-all duration-300 border border-blue-200 rounded-lg bg-white transform hover:-translate-y-1",
          rankBadge: "w-8 sm:w-10 h-8 sm:h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm shadow-md border-2 border-white",
          icon: "‚≠ê",
          text: `${rank}‰Ωç`,
          titleClass: "text-lg sm:text-xl font-bold text-gray-800 hover:text-blue-600",
          titleShadow: undefined,
          buttonClass: "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-5 px-4 shadow-md hover:shadow-xl"
        }
    }
  }

  const rankStyle = getRankStyle(rank)

  return (
    <Card className={rankStyle.cardClass}>
      {/* „É©„É≥„Ç≠„É≥„Ç∞„Éê„ÉÉ„Ç∏ÔºàÁ∞°Á¥†ÂåñÔºâ */}
      <div className="absolute -top-1 -left-1 z-20">
        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold text-white shadow-md ${
          rank === 1 ? 'bg-gradient-to-br from-yellow-400 to-orange-500' :
          rank === 2 ? 'bg-gradient-to-br from-gray-400 to-gray-500' :
          rank === 3 ? 'bg-gradient-to-br from-orange-400 to-yellow-500' :
          'bg-gradient-to-br from-blue-500 to-purple-500'
        }`}>
          {rank}
        </div>
      </div>

      <CardContent className="p-3">
        <div className="space-y-3">
          {/* „Ç≥„É≥„Éë„ÇØ„Éà„Éò„ÉÉ„ÉÄ„ÉºÔºà„É¢„Éê„Ç§„É´ÊúÄÈÅ©ÂåñÔºâ */}
          <div className="flex items-start gap-3 ml-2">
            {/* „Çµ„Éº„Éì„ÇπÁîªÂÉèÔºàÂ∑¶ÂØÑ„ÅõÔºâ */}
            {recommendation.service.image && (
              <div className="relative w-10 h-10 flex-shrink-0 mt-0.5">
                <img 
                  src={recommendation.service.image} 
                  alt={recommendation.service.name}
                  className="w-10 h-10 rounded-md object-cover shadow-sm"
                  onLoad={() => setImageLoadState(true)}
                />
              </div>
            )}
            
            <div className="flex-1 min-w-0">
              <h3 
                className="text-sm sm:text-base font-bold text-gray-900 leading-tight cursor-pointer hover:text-blue-600 transition-colors line-clamp-2"
                onClick={() => onServiceClick(recommendation.service, recommendation)}
              >
                {recommendation.service.name}
              </h3>
              <div className="flex items-center gap-2 mt-1 flex-wrap">
                <Badge variant="outline" className="text-xs px-1.5 py-0.5 bg-blue-50 text-blue-700 border-blue-200">
                  {Math.round(recommendation.score * 10) / 10}ÁÇπ
                </Badge>
                {recommendation.priority === 'urgent' && (
                  <Badge variant="destructive" className="text-xs px-1.5 py-0.5">
                    Á∑äÊÄ•
                  </Badge>
                )}
              </div>
            </div>
          </div>

          {/* Á∞°ÊΩî„Å™Ë™¨Êòé */}
          <p className="text-xs text-gray-600 leading-relaxed line-clamp-1 ml-2 px-1">
            {recommendation.service.description}
          </p>

          {/* Ë©≥Á¥∞Â±ïÈñã„Ç®„É™„Ç¢ */}
          <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>
            <CollapsibleTrigger className="flex items-center justify-center w-full py-1.5 text-xs text-blue-600 hover:text-blue-800 transition-colors hover:bg-blue-50 rounded-md">
              {isExpanded ? (
                <>Ë©≥Á¥∞„ÇíÈñâ„Åò„Çã <ChevronUp className="w-3 h-3 ml-1" /></>
              ) : (
                <>Ë©≥Á¥∞„ÇíË¶ã„Çã <ChevronDown className="w-3 h-3 ml-1" /></>
              )}
            </CollapsibleTrigger>
            
            <CollapsibleContent className="space-y-2 mt-2 border-t pt-2">
              {/* AIÊé®Ëñ¶ÁêÜÁî±Ôºà„Ç≥„É≥„Éë„ÇØ„ÉàÔºâ */}
              <div className="bg-blue-50 rounded-md p-2">
                <h5 className="text-xs font-semibold text-blue-800 mb-1 flex items-center gap-1">
                  <Brain className="w-3 h-3" />
                  Êé®Ëñ¶ÁêÜÁî±
                </h5>
                <p className="text-xs text-blue-700 leading-relaxed">
                  {recommendation.aiReason}
                </p>
              </div>

              {/* ÊúüÂæÖ„Åï„Çå„ÇãÂäπÊûúÔºà„Ç≥„É≥„Éë„ÇØ„ÉàÔºâ */}
              <div className="bg-green-50 rounded-md p-2">
                <h5 className="text-xs font-semibold text-green-800 mb-1 flex items-center gap-1">
                  <TrendingUp className="w-3 h-3" />
                  ÊúüÂæÖÂäπÊûú
                </h5>
                <p className="text-xs text-green-700">
                  {recommendation.expectedOutcome}
                </p>
              </div>

              {/* „Éû„ÉÉ„ÉÅË¶ÅÂõ†ÔºàÊúÄÂ§ß2ÂÄã„Åæ„ÅßÔºâ */}
              {recommendation.matchFactors?.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {recommendation.matchFactors.slice(0, 2).map((factor: string, index: number) => (
                    <Badge 
                      key={index} 
                      variant="secondary" 
                      className="text-xs px-1.5 py-0.5 bg-gray-100 text-gray-600"
                    >
                      {factor}
                    </Badge>
                  ))}
                </div>
              )}
            </CollapsibleContent>
          </Collapsible>

          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ÔºàÁ∞°Á¥†ÂåñÔºâ */}
          <Button
            onClick={() => onServiceClick(recommendation.service, recommendation)}
            className={`w-full h-8 text-xs font-medium transition-all duration-200 ${
              rank === 1 
                ? 'bg-yellow-500 hover:bg-yellow-600 text-white' 
                : rank === 2
                ? 'bg-gray-500 hover:bg-gray-600 text-white'
                : rank === 3
                ? 'bg-orange-500 hover:bg-orange-600 text-white'
                : 'bg-blue-500 hover:bg-blue-600 text-white'
            }`}
          >
            Ë©≥Á¥∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ <ExternalLink className="w-3 h-3 ml-1" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

function V3ResultPageContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const diagnosisType = searchParams.get('type') || 'partial' // 'partial' or 'final'
  
  const [session, setSession] = useState<any>(null)
  const [diagnosisResult, setDiagnosisResult] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isExecutingFinalDiagnosis, setIsExecutingFinalDiagnosis] = useState(false)
  const [serviceRecommendations, setServiceRecommendations] = useState<any[]>([])
  const [isLoadingServices, setIsLoadingServices] = useState(false)

  useEffect(() => {
    initializePage()
  }, [diagnosisType])

  const initializePage = async () => {
    setIsLoading(true)
    
    try {
      const currentSession = getV3Session()
      setSession(currentSession)

      if (diagnosisType === 'final') {
        // ÊúÄÁµÇË®∫Êñ≠„ÇíÂÆüË°å
        await executeFinalDiagnosis(currentSession)
      } else {
        // ÈÄî‰∏≠Ë®∫Êñ≠ÁµêÊûú„ÇíË°®Á§∫
        if (currentSession.partialDiagnosisHistory?.length > 0) {
          const latestPartial = currentSession.partialDiagnosisHistory[currentSession.partialDiagnosisHistory.length - 1]
          setDiagnosisResult(latestPartial)
          
          // „Çµ„Éº„Éì„ÇπÊé®Ëñ¶„ÇíÁîüÊàê
          await generateServiceRecommendations(currentSession)
        }
      }
    } catch (error) {
      console.error('ÁµêÊûú„Éö„Éº„Ç∏ÂàùÊúüÂåñ„Ç®„É©„Éº:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const executeFinalDiagnosis = async (currentSession: any) => {
    setIsExecutingFinalDiagnosis(true)
    
    try {
      trackEvent('V3ÊúÄÁµÇË®∫Êñ≠ÂÆüË°å', {
        version: 'v3',
        answered_questions: currentSession.completedQuestions,
        total_questions: currentSession.totalQuestions
      })

      const response = await fetch('/api/v3/final-diagnosis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          textAnswers: currentSession.textAnswers,
          partialDiagnosisHistory: currentSession.partialDiagnosisHistory
        })
      })

      if (!response.ok) throw new Error('ÊúÄÁµÇË®∫Êñ≠API „Ç®„É©„Éº')

      const { result } = await response.json()
      
      // ÊúÄÁµÇË®∫Êñ≠ÁµêÊûú„Çí‰øùÂ≠ò
      setV3FinalResult(result)
      setDiagnosisResult(result)

      // „Çµ„Éº„Éê„Éº„Å´ÂêåÊúü
      await syncV3SessionToServer()
      
      // „Çµ„Éº„Éì„ÇπÊé®Ëñ¶„ÇíÁîüÊàê
      await generateServiceRecommendations(getV3Session())

    } catch (error) {
      console.error('ÊúÄÁµÇË®∫Êñ≠„Ç®„É©„Éº:', error)
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁµêÊûú„ÇíË°®Á§∫
      setDiagnosisResult({
        resultType: 'Ë®∫Êñ≠„Ç®„É©„Éº',
        summary: 'Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇË®∫Êñ≠‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ',
        actionPlan: ['ÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ']
      })
    } finally {
      setIsExecutingFinalDiagnosis(false)
    }
  }

  const generateServiceRecommendations = async (sessionData: any) => {
    setIsLoadingServices(true)
    try {
      console.log('üîç [Result Page] „Çµ„Éº„Éì„ÇπÊé®Ëñ¶ÁîüÊàêÈñãÂßã:', {
        sessionId: sessionData.sessionId,
        answersCount: Object.keys(sessionData.textAnswers || {}).length,
        hasPartialResults: !!sessionData.partialResults?.length,
        hasFinalResult: !!sessionData.finalResult
      })
      
      const recommendations = await v3ServiceEngine.generateRecommendations(sessionData)
      
      console.log('üìä [Result Page] Êé®Ëñ¶„Ç®„É≥„Ç∏„É≥ÁµêÊûú:', {
        recommendationsCount: recommendations.length,
        recommendations: recommendations.map(r => ({ name: r.service.name, score: r.score, priority: r.priority })),
        urgentCount: recommendations.filter(r => r.priority === 'urgent').length,
        recommendedCount: recommendations.filter(r => r.priority === 'recommended').length,
        considerCount: recommendations.filter(r => r.priority === 'consider').length
      })
      
      // „Ç®„É≥„Ç∏„É≥ÂÅ¥„ÅßÊúÄ‰Ωé3„Å§„ÅØ‰øùË®º„Åï„Çå„Å¶„ÅÑ„Çã„ÅØ„Åö„Å†„Åå„ÄÅUIÂÅ¥„Åß„ÇÇÁ¢∫Ë™ç
      if (recommendations.length === 0) {
        console.error('‚ùå [Result Page] Êé®Ëñ¶„Ç®„É≥„Ç∏„É≥„Åã„Çâ0‰ª∂„ÅÆÁµêÊûú„ÄÇÁ∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å')
        // Á∑äÊÄ•ÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºàservices.ts„Åã„ÇâÁõ¥Êé•ÈÅ∏ÊäûÔºâ
        const { services } = await import('@/lib/services')
        const emergencyRecommendations = services.slice(0, 3).map((service, index) => ({
          service,
          rank: index + 1,
          score: 1.0,
          aiReason: `${service.description} Ë®∫Êñ≠ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„ÅüÊé®Ëñ¶„Åß„Åô„ÄÇ`,
          priority: 'consider' as const,
          timing: '3-6months' as const,
          expectedOutcome: 'ÁèæÁä∂„ÅÆÊîπÂñÑ',
          matchFactors: ['Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ']
        }))
        setServiceRecommendations(emergencyRecommendations)
        console.log('üö® [Result Page] Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü:', emergencyRecommendations.length)
      } else {
        setServiceRecommendations(recommendations)
        console.log('‚úÖ [Result Page] „Çµ„Éº„Éì„ÇπÊé®Ëñ¶Ë®≠ÂÆöÂÆå‰∫Ü:', recommendations.length)
        console.log('üîç [Result Page] React stateÊõ¥Êñ∞:', {
          stateLength: recommendations.length,
          priorityBreakdown: {
            urgent: recommendations.filter(r => r.priority === 'urgent').length,
            recommended: recommendations.filter(r => r.priority === 'recommended').length,
            consider: recommendations.filter(r => r.priority === 'consider').length
          }
        })
      }
      
    } catch (error) {
      console.error('‚ùå [Result Page] „Çµ„Éº„Éì„ÇπÊé®Ëñ¶ÁîüÊàê„Ç®„É©„Éº:', error)
      console.error('„Ç®„É©„ÉºË©≥Á¥∞:', error.stack)
      
      // ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      try {
        const { services } = await import('@/lib/services')
        const fallbackRecommendations = services.slice(0, 5).map((service, index) => ({
          service,
          rank: index + 1,
          score: 1.0,
          aiReason: `${service.description} „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅ„Åì„ÅÆ„Çµ„Éº„Éì„Çπ„Çí„ÅîÊ§úË®é„Åè„Å†„Åï„ÅÑ„ÄÇ`,
          priority: 'consider' as const,
          timing: '1-3months' as const,
          expectedOutcome: 'ÁèæÁä∂„ÅÆÊîπÂñÑ',
          matchFactors: ['„Ç®„É©„Éº„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ']
        }))
        setServiceRecommendations(fallbackRecommendations)
        console.log('üîß [Result Page] „Ç®„É©„Éº„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü:', fallbackRecommendations.length)
      } catch (fallbackError) {
        console.error('üí• [Result Page] ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÂ§±Êïó:', fallbackError)
        setServiceRecommendations([])
      }
    } finally {
      setIsLoadingServices(false)
    }
  }

  const handleServiceClick = async (service: any, recommendation?: any) => {
    try {
      if (recommendation) {
        // V3Êé®Ëñ¶„Ç®„É≥„Ç∏„É≥„Åã„Çâ„ÅÆ„Çµ„Éº„Éì„Çπ
        await v3ServiceTracker.trackServiceClick(recommendation, 'card_click')
      } else {
        // ÂæìÊù•„ÅÆ„Çµ„Éº„Éì„ÇπÔºàÂæåÊñπ‰∫íÊèõÔºâ
        const diagnosisStage = diagnosisType === 'final' ? 'final' : `partial_${session?.completedQuestions}`
        
        addV3ClickedService(
          service.id,
          service.name,
          service.url || '#',
          diagnosisStage,
          diagnosisResult?.resultType
        )

        trackEvent('V3„Çµ„Éº„Éì„Çπ„ÇØ„É™„ÉÉ„ÇØ', {
          version: 'v3',
          service_id: service.id,
          service_name: service.name,
          diagnosis_stage: diagnosisStage,
          result_type: diagnosisResult?.resultType
        })
      }

      if (service.url && service.url !== '#') {
        window.open(service.url, '_blank')
      }
    } catch (error) {
      console.error('„Çµ„Éº„Éì„Çπ„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ„Ç®„É©„Éº:', error)
    }
  }

  const handleContinueDiagnosis = () => {
    trackEvent('V3Ë®∫Êñ≠Á∂ôÁ∂ö', {
      version: 'v3',
      from_stage: diagnosisType,
      current_questions: session?.completedQuestions
    })
    router.push('/v3/diagnosis')
  }

  const handleRetryDiagnosis = () => {
    setIsLoading(true)
    setTimeout(() => {
      initializePage()
    }, 1000)
  }

  if (isLoading || isExecutingFinalDiagnosis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 flex items-center justify-center">
        <div className="container mx-auto px-4 max-w-2xl">
          <div className="bg-white rounded-2xl shadow-2xl border-0 overflow-hidden">
            <div className="py-16 px-8">
              <div className="text-center">
                {/* V3Â∞ÇÁî®„É°„Ç§„É≥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */}
                <div className="relative mb-8">
                  {/* Â§ñÂÅ¥„ÅÆÂõûËª¢„É™„É≥„Ç∞ */}
                  <div className="w-28 h-28 mx-auto relative">
                    <div className="absolute inset-0 border-4 border-green-200 rounded-full"></div>
                    <div className="absolute inset-0 border-4 border-transparent border-t-green-500 rounded-full animate-spin"></div>
                    <div className="absolute inset-2 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" style={{animationDirection: 'reverse'}}></div>
                    <div className="absolute inset-4 border-4 border-transparent border-t-purple-500 rounded-full animate-spin" style={{animationDuration: '3s'}}></div>
                  </div>
                  
                  {/* ‰∏≠Â§Æ„ÅÆV3„Ç¢„Ç§„Ç≥„É≥ */}
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                    <div className="w-10 h-10 bg-gradient-to-r from-green-500 via-blue-500 to-purple-500 rounded-full flex items-center justify-center animate-pulse shadow-lg">
                      <span className="text-white font-bold text-lg">V3</span>
                    </div>
                  </div>
                </div>

                {/* „Çø„Ç§„Éà„É´ */}
                <div className="mb-6">
                  <div className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-green-100 to-blue-100 border border-green-200 text-green-700 rounded-full text-sm font-medium mb-4 shadow-lg">
                    <span className="text-2xl mr-2">üß†</span>
                    Claude 3.5 Sonnet AIÂàÜÊûê
                  </div>
                  <h2 className="text-3xl font-bold text-gray-900 mb-2">
                    <span className="bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent">
                      {isExecutingFinalDiagnosis ? '„ÉÜ„Ç≠„Çπ„ÉàÊ∑±Â±§ÂàÜÊûê‰∏≠' : 'V3Ë®∫Êñ≠ÁµêÊûúÊ∫ñÂÇô‰∏≠'}
                    </span>
                  </h2>
                  <p className="text-lg text-gray-700 font-medium">
                    {isExecutingFinalDiagnosis ? 
                      '„ÅÇ„Å™„Åü„ÅÆË®ÄËëâ„ÅÆ„Éã„É•„Ç¢„É≥„Çπ„Åæ„ÅßËß£Êûê„Åó„Å¶„ÅÑ„Åæ„Åô' : 
                      'Ë®∫Êñ≠ÁµêÊûú„ÇíÊúÄÈÅ©Âåñ„Åó„Å¶„ÅÑ„Åæ„Åô'
                    }
                  </p>
                </div>
                
                {/* ÂãïÁöÑ„É°„ÉÉ„Çª„Éº„Ç∏ & „Éó„É≠„Çª„ÇπË°®Á§∫ */}
                <div className="space-y-6 mb-8">
                  {/* ÂãïÁöÑ„Éâ„ÉÉ„Éà */}
                  <div className="flex items-center justify-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full animate-bounce"></div>
                    <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-3 h-3 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                  
                  {/* „Éó„É≠„Çª„ÇπË°®Á§∫ */}
                  <div className="space-y-3">
                    <div className="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg p-3">
                      <span className="flex items-center gap-2">
                        <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                        „ÉÜ„Ç≠„Çπ„ÉàÊÑüÊÉÖÂàÜÊûê
                      </span>
                      <span className="text-green-600 font-medium">ÂÆå‰∫Ü ‚úì</span>
                    </div>
                    <div className="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg p-3">
                      <span className="flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></span>
                        „Ç≠„É£„É™„Ç¢ÊÑèÂõ≥Ëß£Êûê
                      </span>
                      <span className="text-blue-600 font-medium">ÂÆüË°å‰∏≠...</span>
                    </div>
                    <div className="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg p-3">
                      <span className="flex items-center gap-2">
                        <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                        ÊúÄÈÅ©„Çµ„Éº„Éì„ÇπÈÅ∏ÂÆö
                      </span>
                      <span className="text-gray-400">ÂæÖÊ©ü‰∏≠</span>
                    </div>
                  </div>
                </div>

                {/* „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº */}
                <div className="w-full bg-gray-200 rounded-full h-3 mb-6 overflow-hidden">
                  <div className="bg-gradient-to-r from-green-500 via-blue-500 to-purple-500 h-3 rounded-full transition-all duration-1000 animate-pulse" style={{width: isExecutingFinalDiagnosis ? '85%' : '65%'}}></div>
                </div>
                
                {/* V3ÁâπÂæ¥Ë™¨Êòé */}
                <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4 border border-green-200">
                  <p className="text-sm text-green-800 font-medium mb-2">‚ú® V3„Ç∑„Çπ„ÉÜ„É†„ÅÆÁâπÂæ¥</p>
                  <div className="grid grid-cols-2 gap-2 text-xs text-green-700">
                    <div className="flex items-center gap-1">
                      <span className="w-1 h-1 bg-green-500 rounded-full"></span>
                      „ÉÜ„Ç≠„Çπ„ÉàÊ∑±Â±§Ëß£Êûê
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1 h-1 bg-blue-500 rounded-full"></span>
                      AIÂÄãÂà•Êé®Ëñ¶
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1 h-1 bg-purple-500 rounded-full"></span>
                      ÊÆµÈöéÁöÑÁ≤æÂ∫¶Âêë‰∏ä
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="w-1 h-1 bg-green-500 rounded-full"></span>
                      „É™„Ç¢„É´„Çø„Ç§„É†ÂàÜÊûê
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!diagnosisResult) {
    return (
      <div className="text-center py-12">
        <AlertTriangle className="w-16 h-16 text-red-400 mx-auto mb-4" />
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Ë®∫Êñ≠ÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h2>
        <p className="text-gray-600 mb-6">Ë®∫Êñ≠„ÇíÂÆüË°å„Åó„Å¶„Åã„ÇâÁµêÊûú„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ</p>
        <Button onClick={() => router.push('/v3/diagnosis')}>
          Ë®∫Êñ≠„ÇíÈñãÂßã„Åô„Çã
        </Button>
      </div>
    )
  }

  const isFinalDiagnosis = diagnosisType === 'final'
  const canContinue = session && session.completedQuestions < session.totalQuestions

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* ÁµêÊûú„Éò„ÉÉ„ÉÄ„Éº */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-2">
          <Badge 
            variant="outline" 
            className={`px-4 py-2 text-sm font-medium ${
              isFinalDiagnosis 
                ? 'bg-green-100 text-green-800 border-green-300' 
                : 'bg-blue-100 text-blue-800 border-blue-300'
            }`}
          >
            {isFinalDiagnosis ? (
              <><CheckCircle className="w-4 h-4 mr-1" /> ÊúÄÁµÇË®∫Êñ≠ÁµêÊûú</>
            ) : (
              <><Clock className="w-4 h-4 mr-1" /> ÈÄî‰∏≠Ë®∫Êñ≠ÁµêÊûú ({session?.completedQuestions}ÂïèÂõûÁ≠î)</>
            )}
          </Badge>
        </div>

        <h1 className="text-3xl md:text-4xl font-bold text-gray-900">
          {diagnosisResult.resultType}
        </h1>
      </div>

      {/* Ë®∫Êñ≠ÁµêÊûú„É°„Ç§„É≥ */}
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-6 h-6" />
            ÂàÜÊûêÁµêÊûú
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Á∑èÂêàÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥ */}
          <div className="space-y-6">
            
            <div className="prose max-w-none">
              <p className="text-lg leading-relaxed text-gray-800">
                {diagnosisResult.summary || diagnosisResult.comprehensiveAdvice}
              </p>
            </div>

            {diagnosisResult.keyInsights && (
              <div className="space-y-2">
                <h4 className="font-semibold text-gray-900">‰∏ªË¶Å„Å™Ê¥ûÂØü</h4>
                <ul className="space-y-1">
                  {diagnosisResult.keyInsights.map((insight: string, index: number) => (
                    <li key={index} className="flex items-start gap-2">
                      <Star className="w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                      <span className="text-gray-700">{insight}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {diagnosisResult.urgencyLevel && (
              <div className="flex items-center gap-2 p-3 rounded-lg bg-gray-50">
                <AlertTriangle className={`w-5 h-5 ${
                  diagnosisResult.urgencyLevel === 'high' ? 'text-red-500' :
                  diagnosisResult.urgencyLevel === 'medium' ? 'text-yellow-500' :
                  'text-green-500'
                }`} />
                <span className="font-medium">
                  Á∑äÊÄ•Â∫¶: {
                    diagnosisResult.urgencyLevel === 'high' ? 'È´ò' :
                    diagnosisResult.urgencyLevel === 'medium' ? '‰∏≠' : '‰Ωé'
                  }
                </span>
              </div>
            )}

            {/* Ë©≥Á¥∞ÂàÜÊûêÔºàÊúÄÁµÇË®∫Êñ≠ÊôÇ„ÅÆ„ÅøË°®Á§∫Ôºâ */}
            {isFinalDiagnosis && (
              <div className="space-y-6 mt-8 border-t pt-6">
                <h4 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                  <Brain className="w-6 h-6" />
                  Ë©≥Á¥∞ÂàÜÊûê
                </h4>
                
                <div className="grid md:grid-cols-2 gap-4">
                  {diagnosisResult.detailedAnalysis?.emotionalState && (
                    <Card>
                      <CardHeader className="pb-3">
                        <CardTitle className="text-lg">ÊÑüÊÉÖÁä∂ÊÖã</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2">
                        <p><strong>ÁèæÂú®„ÅÆ„É¨„Éô„É´:</strong> {diagnosisResult.detailedAnalysis.emotionalState.current_level}</p>
                        {diagnosisResult.detailedAnalysis.emotionalState.primary_emotions && (
                          <div>
                            <strong>‰∏ªË¶Å„Å™ÊÑüÊÉÖ:</strong>
                            <ul className="list-disc list-inside mt-1 text-sm text-gray-600">
                              {diagnosisResult.detailedAnalysis.emotionalState.primary_emotions.map((emotion: string, i: number) => (
                                <li key={i}>{emotion}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {diagnosisResult.detailedAnalysis?.careerGoals && (
                    <Card>
                      <CardHeader className="pb-3">
                        <CardTitle className="text-lg">„Ç≠„É£„É™„Ç¢ÁõÆÊ®ô</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2">
                        <p><strong>ÊòéÁ¢∫Â∫¶:</strong> {diagnosisResult.detailedAnalysis.careerGoals.clarity_level}</p>
                        {diagnosisResult.detailedAnalysis.careerGoals.primary_goals && (
                          <div>
                            <strong>‰∏ªË¶ÅÁõÆÊ®ô:</strong>
                            <ul className="list-disc list-inside mt-1 text-sm text-gray-600">
                              {diagnosisResult.detailedAnalysis.careerGoals.primary_goals.map((goal: string, i: number) => (
                                <li key={i}>{goal}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}
                </div>

                {diagnosisResult.longTermStrategy && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Èï∑ÊúüÊà¶Áï•</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-800 leading-relaxed">{diagnosisResult.longTermStrategy}</p>
                    </CardContent>
                  </Card>
                )}
              </div>
            )}
          </div>

          {/* „Åä„Åô„Åô„ÇÅ„Çµ„Éº„Éì„Çπ„Çª„ÇØ„Ç∑„Éß„É≥ */}
          <div className="space-y-6 border-t pt-6">
            <div className="text-center space-y-2">
              <h3 className="text-xl font-semibold text-gray-800 flex items-center justify-center gap-2">
                üéØ „ÅÇ„Å™„Åü„Å´„Åä„Åô„Åô„ÇÅ„ÅÆ„Çµ„Éº„Éì„Çπ
              </h3>
              <p className="text-sm text-gray-600">Claude AI„ÅåË®∫Êñ≠ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶Âé≥ÈÅ∏</p>
              {serviceRecommendations.length > 0 && (
                <p className="text-sm text-gray-500">
                  ÂêàË®à {serviceRecommendations.length} ‰ª∂ | 
                  Á∑äÊÄ•: {serviceRecommendations.filter(r => r.priority === 'urgent').length} | 
                  Êé®Â•®: {serviceRecommendations.filter(r => r.priority === 'recommended').length} | 
                  Ê§úË®é: {serviceRecommendations.filter(r => r.priority === 'consider').length}
                </p>
              )}
            </div>

            {isLoadingServices ? (
              <div className="flex items-center justify-center py-12">
                <div className="text-center space-y-3">
                  <div className="w-8 h-8 border-3 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
                  <p className="text-gray-600">„ÅÇ„Å™„Åü„Å´ÊúÄÈÅ©„Å™„Çµ„Éº„Éì„Çπ„ÇíÂàÜÊûê‰∏≠...</p>
                </div>
              </div>
            ) : serviceRecommendations.length > 0 ? (
              <div className="space-y-8">
                {/* Á∑äÊÄ•Â∫¶È´ò */}
                {serviceRecommendations.filter(rec => rec.priority === 'urgent').length > 0 && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <AlertTriangle className="w-5 h-5 text-red-500" />
                      <h4 className="text-lg font-semibold text-red-700">Á∑äÊÄ•ÂØæÂøúÊé®Â•®</h4>
                      <Badge variant="destructive" className="text-xs">
                        {serviceRecommendations.filter(rec => rec.priority === 'urgent').length}‰ª∂
                      </Badge>
                    </div>
                    <div className="grid gap-3 sm:grid-cols-2">
                      {serviceRecommendations
                        .filter(rec => rec.priority === 'urgent')
                        .map((recommendation) => (
                          <ServiceCard 
                            key={recommendation.service.id} 
                            recommendation={recommendation} 
                            onServiceClick={handleServiceClick}
                            isUrgent={true}
                          />
                        ))}
                    </div>
                  </div>
                )}
                
                {/* Êé®Â•® */}
                {serviceRecommendations.filter(rec => rec.priority === 'recommended').length > 0 && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Star className="w-5 h-5 text-yellow-500" />
                      <h4 className="text-lg font-semibold text-yellow-700">„Åä„Åô„Åô„ÇÅ</h4>
                      <Badge variant="outline" className="text-xs bg-yellow-100 text-yellow-700">
                        {serviceRecommendations.filter(rec => rec.priority === 'recommended').length}‰ª∂
                      </Badge>
                    </div>
                    <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
                      {serviceRecommendations
                        .filter(rec => rec.priority === 'recommended')
                        .map((recommendation) => (
                          <ServiceCard 
                            key={recommendation.service.id} 
                            recommendation={recommendation} 
                            onServiceClick={handleServiceClick}
                          />
                        ))}
                    </div>
                  </div>
                )}
                
                {/* Ê§úË®éÂØæË±° */}
                {serviceRecommendations.filter(rec => rec.priority === 'consider').length > 0 && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Clock className="w-5 h-5 text-blue-500" />
                      <h4 className="text-lg font-semibold text-blue-700">Ê§úË®éÂØæË±°</h4>
                      <Badge variant="outline" className="text-xs bg-blue-100 text-blue-700">
                        {serviceRecommendations.filter(rec => rec.priority === 'consider').length}‰ª∂
                      </Badge>
                    </div>
                    <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
                      {serviceRecommendations
                        .filter(rec => rec.priority === 'consider')
                        .map((recommendation) => (
                          <ServiceCard 
                            key={recommendation.service.id} 
                            recommendation={recommendation} 
                            onServiceClick={handleServiceClick}
                          />
                        ))}
                    </div>
                  </div>
                )}

                {/* ÈÅ∏Êäû„ÅÆ„Éí„É≥„Éà */}
                <div className="text-center p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg border border-green-200">
                  <h5 className="font-medium text-green-800 mb-1">üí° „Çµ„Éº„Éì„ÇπÈÅ∏Êäû„ÅÆ„Éí„É≥„Éà</h5>
                  <p className="text-sm text-green-700">
                    Ëø∑„Å£„Åü„Å®„Åç„ÅØ1‰Ωç„ÅÆ„Çµ„Éº„Éì„Çπ„Åã„Çâ„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ
                  </p>
                </div>
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="space-y-4">
                  <div className="text-4xl">üîß</div>
                  <h4 className="text-lg font-semibold text-gray-900">„Çµ„Éº„Éì„ÇπÊé®Ëñ¶„ÇíÁîüÊàê‰∏≠</h4>
                  <p className="text-gray-600">
                    Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÁèæÂú®„Çµ„Éº„Éì„ÇπÊé®Ëñ¶„ÇíÁîüÊàê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ<br/>
                    Ë®∫Êñ≠„ÇíÁ∂ö„Åë„Çã„Åã„ÄÅ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ
                  </p>
                  <Button 
                    onClick={() => generateServiceRecommendations(session)}
                    variant="outline"
                    className="mt-4"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    ÂÜçË©¶Ë°å
                  </Button>
                </div>
              </div>
            )}
          </div>

        </CardContent>
      </Card>


      {/* ÂàÜÊûêÁ≤æÂ∫¶„Å®ÈÄ≤Ë°åÁä∂Ê≥ÅÔºàÈÄî‰∏≠Ë®∫Êñ≠„ÅÆÂ†¥ÂêàÔºâ */}
      {!isFinalDiagnosis && (
        <div className="space-y-4">
          <Alert className="max-w-2xl mx-auto border-amber-200 bg-amber-50">
            <Lightbulb className="h-4 w-4 text-amber-600" />
            <AlertDescription className="text-amber-800">
              <p className="font-medium mb-2">ÁèæÂú®„ÅÆÂàÜÊûêÁ≤æÂ∫¶: {session?.completedQuestions <= 3 ? '30-40%' : session?.completedQuestions <= 6 ? '60-70%' : '80-90%'}</p>
              <p className="text-sm">ÊúÄÂæå„Åæ„ÅßÁ≠î„Åà„Çã„Å®„ÄÅ„Åï„Çâ„Å´Ë©≥Á¥∞„ÅßÊ≠£Á¢∫„Å™Ë®∫Êñ≠ÁµêÊûú„Çí„ÅäÂ±ä„Åë„Åß„Åç„Åæ„Åô„ÄÇ</p>
            </AlertDescription>
          </Alert>

          <Card className="border-amber-200 bg-amber-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-amber-800">
                <Target className="w-5 h-5" />
                Ë®∫Êñ≠ÈÄ≤Ë°åÁä∂Ê≥Å
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <Progress 
                  value={(session?.completedQuestions / session?.totalQuestions) * 100} 
                  className="bg-amber-200"
                />
                <div className="flex justify-between text-sm text-amber-700">
                  <span>ÂõûÁ≠îÊ∏à„Åø: {session?.completedQuestions}Âïè</span>
                  <span>ÊÆã„Çä: {session?.totalQuestions - session?.completedQuestions}Âïè</span>
                </div>
                <p className="text-xs text-amber-600">
                  „Çà„ÇäË©≥Á¥∞„ÅßÊ≠£Á¢∫„Å™Ë®∫Êñ≠ÁµêÊûú„ÇíÂæó„Çã„Åü„ÇÅ„Å´„ÄÅÊÆã„Çä„ÅÆË≥™Âïè„Å´„ÇÇ„ÅäÁ≠î„Åà„Åè„Å†„Åï„ÅÑ
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        {!isFinalDiagnosis && canContinue && (
          <Button 
            size="lg"
            onClick={handleContinueDiagnosis}
            className="bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600"
          >
            <MessageSquareText className="w-5 h-5 px-2" />
            Á∂ö„Åë„Å¶ÂõûÁ≠î„Åô„ÇãÔºà„Çà„ÇäÊ≠£Á¢∫„Å™Ë®∫Êñ≠„ÅÆ„Åü„ÇÅ„Å´Ôºâ
            <ArrowRight className="w-5 h-5 ml-2" />
          </Button>
        )}

        {diagnosisResult.resultType === 'Ë®∫Êñ≠„Ç®„É©„Éº' && (
          <Button onClick={handleRetryDiagnosis} variant="outline">
            <RefreshCw className="w-4 h-4 mr-2" />
            Ë®∫Êñ≠„ÇíÂÜçÂÆüË°å
          </Button>
        )}

        <Link href="/v3">
          <Button variant="outline">
            <FileText className="w-4 h-4 mr-2" />
            V3Ë®∫Êñ≠„Éà„ÉÉ„Éó„Å´Êàª„Çã
          </Button>
        </Link>
      </div>

      {/* Ë®∫Êñ≠ÂÆå‰∫ÜÂæå„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ */}
      {isFinalDiagnosis && (
        <Alert className="border-green-200 bg-green-50">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            <p className="font-medium">Ë®∫Êñ≠ÂÆå‰∫ÜÔºÅ</p>
            <p className="text-sm mt-1">
              „Åô„Åπ„Å¶„ÅÆË≥™Âïè„Å´„ÅäÁ≠î„Åà„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„ÄÇ
              „Åì„ÅÆÁµêÊûú„ÇíÂèÇËÄÉ„Å´„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Ç≠„É£„É™„Ç¢„ÅÆÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíËÄÉ„Åà„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </p>
          </AlertDescription>
        </Alert>
      )}
    </div>
  )
}

export default function V3ResultPage() {
  return (
    <Suspense fallback={
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <div className="w-16 h-16 border-4 border-green-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
          <div className="space-y-2">
            <h3 className="text-xl font-semibold text-gray-900">Ë™≠„ÅøËæº„Åø‰∏≠...</h3>
            <p className="text-gray-600">Ë®∫Êñ≠ÁµêÊûú„ÇíÊ∫ñÂÇô‰∏≠„Åß„Åô</p>
          </div>
        </div>
      </div>
    }>
      <V3ResultPageContent />
    </Suspense>
  )
}